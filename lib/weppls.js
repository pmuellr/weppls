// Generated by CoffeeScript 1.6.3
var Program, Verbose, Version, coffee, copyResources, createIndexHtml, createIndexScript, createViews, iSubDirs, main, marked, path, pkg, sh, weppls, _,
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

path = require("path");

_ = require("underscore");

sh = require("shelljs");

marked = require("marked");

coffee = require("coffee-script");

pkg = require("../package.json");

weppls = exports;

iSubDirs = "views services filters directives".split(" ");

Program = pkg.name;

Version = pkg.version;

Verbose = false;

weppls.run = function(dir, options) {
  if (options == null) {
    options = {};
  }
  if (dir == null) {
    weppls.error("no dir specified");
  }
  if (options.output == null) {
    options.output = "" + dir + "-out";
  }
  Verbose = !!options.verbose;
  return main(dir, options);
};

main = function(iDir, options) {
  var oDir;
  oDir = options.output;
  weppls.logv("iDir:    " + iDir);
  weppls.logv("oDir:    " + oDir);
  weppls.logv("options: " + (JSON.stringify(options, null, 4)));
  weppls.logv("");
  weppls.log("generating files in " + oDir);
  sh.mkdir("-p", oDir);
  if (!sh.test("-d", oDir)) {
    weppls.error("unable to create directory " + oDir);
  }
  sh.rm("-rf", "" + oDir + "/*");
  sh.mkdir("-p", path.join(oDir, "m"));
  createViews(iDir, oDir, options);
  createIndexHtml(iDir, oDir, options);
  createIndexScript(iDir, oDir, options);
  return copyResources(iDir, oDir, options);
};

createViews = function(iDir, oDir, options) {
  var base, cFileLen, cFiles, content, ext, file, fileContent, files, fullFile, hFiles, hNameLen, hNames, jFile, jFiles, jFilesExtra, jFilesMissing, mFiles, match, name, oFile, pad, viewsDir, _i, _j, _k, _len, _len1, _len2;
  iDir = path.join(iDir, "views");
  files = sh.ls(iDir);
  cFiles = {};
  hFiles = {};
  jFiles = {};
  mFiles = {};
  for (_i = 0, _len = files.length; _i < _len; _i++) {
    file = files[_i];
    fullFile = path.join(iDir, file);
    match = file.match(/^(.*)\.(.*)$/);
    if (!match) {
      continue;
    }
    base = match[1];
    ext = match[2];
    switch (ext) {
      case "coffee":
        cFiles[base] = sh.cat(fullFile);
        break;
      case "html":
        hFiles[base] = sh.cat(fullFile);
        break;
      case "js":
        jFiles[base] = sh.cat(fullFile);
        break;
      case "md":
        mFiles[base] = sh.cat(fullFile);
        break;
      default:
        weppls.log("ignoring unknown file type in views subdirectory: " + file);
    }
  }
  marked.setOptions({
    gfm: true,
    tables: true,
    breaks: false,
    pedantic: false,
    sanitize: true,
    smartLists: true,
    smartypants: false
  });
  for (name in mFiles) {
    content = mFiles[name];
    if (hFiles[name] != null) {
      weppls.log("ignoring view file " + name + ".md as there is already an " + name + ".html file");
      continue;
    }
    hFiles[name] = marked(content);
  }
  for (name in cFiles) {
    content = cFiles[name];
    if (jFiles[name] != null) {
      weppls.log("ignoring view file " + name + ".coffee as there is already an " + name + ".js file");
      continue;
    }
    options = {
      bare: true
    };
    jFiles[name] = coffee.compile(content, options);
  }
  oFile = path.join(oDir, "m", "views.js");
  hNames = _.keys(hFiles);
  hNameLen = (_.max(hNames, function(hName) {
    return hName.length;
  })).length;
  content = [];
  for (name in hFiles) {
    fileContent = hFiles[name];
    pad = weppls.align.left("", hNameLen - name.length);
    content.push("    " + (JSON.stringify(name)) + ":" + pad + " " + (JSON.stringify(fileContent)));
  }
  content = "// generated on " + (weppls.getDate()) + " by " + Program + " " + Version + "\n\nmodule.exports = {\n" + (content.join(",\n")) + "\n};";
  content.to(oFile);
  viewsDir = path.join(oDir, "m", "views");
  sh.mkdir("-p", viewsDir);
  for (name in jFiles) {
    content = jFiles[name];
    oFile = path.join(viewsDir, "" + name + ".js");
    content.to(oFile);
  }
  hFiles = _.keys(hFiles);
  jFiles = _.keys(jFiles);
  jFilesMissing = _.difference(hFiles, jFiles);
  for (_j = 0, _len1 = jFilesMissing.length; _j < _len1; _j++) {
    jFile = jFilesMissing[_j];
    oFile = path.join(viewsDir, "" + jFile + ".js");
    content = "// generated on " + (weppls.getDate()) + " by " + Program + " " + Version + "\n\nexports.controller = function($scope){\n    /*no-op*/\n};";
    content.to(oFile);
  }
  if (__indexOf.call(jFiles, "body") < 0) {
    oFile = path.join(viewsDir, "body.js");
    content = "// generated on " + (weppls.getDate()) + " by " + Program + " " + Version + "\n\nexports.controller = function($scope){\n    /*no-op*/\n};";
    content.to(oFile);
  }
  jFilesExtra = _.difference(jFiles, hFiles);
  for (_k = 0, _len2 = jFilesExtra.length; _k < _len2; _k++) {
    jFile = jFilesExtra[_k];
    weppls.log("extraneous module in views: " + jFile);
  }
  cFiles = hFiles.slice();
  cFiles.unshift("body");
  cFileLen = (_.max(cFiles, function(cFile) {
    return cFile.length;
  })).length;
  content = _.map(cFiles, function(cFile) {
    pad = weppls.align.left("", cFileLen - cFile.length);
    return "    angularModule.controller('" + cFile + "'" + pad + ", require('./views/" + cFile + "'" + pad + ").controller);";
  });
  content = "// generated on " + (weppls.getDate()) + " by " + Program + " " + Version + "\n\nexports.configure = function(angularModule) {\n" + (content.join('\n')) + "\n};";
  oFile = path.join(oDir, "m", "controllers.js");
  content.to(oFile);
  content = _.map(hFiles, function(hFile) {
    var padH, padU, url;
    url = "/" + hFile;
    if (hFile === "home") {
      url = "/";
    }
    padH = weppls.align.left("", cFileLen - hFile.length);
    padU = weppls.align.left("", cFileLen - url.length + 1);
    return "        $routeProvider.when('" + url + "', " + padU + "{controller:'" + hFile + "', " + padH + "template: views['" + hFile + "']});";
  });
  content = "// generated on " + (weppls.getDate()) + " by " + Program + " " + Version + "\n\nvar views = require(\"./views\");\n\nexports.configure = function(angularModule) {\n    angularModule.config(function($routeProvider){\n        $routeProvider.otherwise({redirectTo: \"/\"});\n\n" + (content.join('\n')) + "\n    })\n\n};";
  oFile = path.join(oDir, "m", "routes.js");
  content.to(oFile);
};

copyResources = function(iDir, oDir, options) {
  var iSubDir, oSubDir, subDir, subDirs, vendorDir, _i, _len;
  subDirs = sh.ls(iDir);
  subDirs = _.filter(subDirs, function(subDir) {
    return sh.test("-d", path.join(iDir, subDir));
  });
  subDirs = _.filter(subDirs, function(subDir) {
    return __indexOf.call(iSubDirs, subDir) < 0;
  });
  for (_i = 0, _len = subDirs.length; _i < _len; _i++) {
    subDir = subDirs[_i];
    iSubDir = path.join(iDir, subDir);
    sh.cp("-R", iSubDir, oDir);
  }
  oSubDir = path.join(oDir, "vendor");
  vendorDir = path.join(__dirname, "..", "vendor");
  sh.cp("-R", vendorDir, oDir);
};

createIndexHtml = function(iDir, oDir, options) {
  var bFile, content, iFile, mFile, oFile;
  iFile = path.join(iDir, "index.html");
  bFile = path.join(iDir, "body.html");
  mFile = path.join(iDir, "menu.html");
  if (!sh.test("-f", iFile)) {
    error("index.html file not found in " + iDir);
  }
  if (!sh.test("-f", bFile)) {
    error("body.html file not found in " + iDir);
  }
  if (!sh.test("-f", mFile)) {
    error("menu.html file not found in " + iDir);
  }
  iFile = sh.cat(iFile);
  bFile = sh.cat(bFile);
  mFile = sh.cat(mFile);
  iFile = iFile.replace("{{body}}", bFile);
  iFile = iFile.replace("{{menu}}", mFile);
  content = "" + iFile + "\n\n<!-- generated on " + (weppls.getDate()) + " by " + Program + " " + Version + " -->";
  oFile = path.join(oDir, "index.html");
  return content.to(oFile);
};

createIndexScript = function(iDir, oDir, options) {
  var baseDir, browserify, cmd, mFile, mainFile, oFile, splitTool;
  baseDir = path.join(__dirname, "..");
  mainFile = path.join(baseDir, "weppls-rt", "lib", "index.js");
  sh.cp(mainFile, path.join(oDir, "m", "main.js"));
  mFile = path.join(oDir, "m", "main.js");
  oFile = path.join(oDir, "index.js");
  browserify = path.join(baseDir, "node_modules", ".bin", "browserify");
  cmd = "" + browserify + "  " + mFile + " --outfile " + oFile + " --debug";
  sh.exec(cmd);
  splitTool = path.join(baseDir, "tools", "split-sourcemap-data-url.coffee");
  coffee = path.join(baseDir, "node_modules", ".bin", "coffee");
  cmd = "" + coffee + " " + splitTool + " " + oFile;
  return sh.exec(cmd);
};

weppls.log = function(message) {
  if ((message == null) || message === "") {
    message = "";
  } else {
    message = "" + pkg.name + ": " + message;
  }
  console.log(message);
};

weppls.logv = function(message) {
  if (!Verbose) {
    return;
  }
  weppls.log(message);
};

weppls.error = function(message) {
  weppls.log(message);
  process.exit(1);
};

weppls.getDate = function() {
  var date, day, hr, min, mon, ms, result, sec, yr;
  date = new Date();
  yr = date.getFullYear();
  mon = date.getMonth() + 1;
  day = date.getDate();
  hr = date.getHours();
  min = date.getMinutes();
  sec = date.getSeconds();
  ms = date.getMilliseconds();
  mon = weppls.align.right("" + mon, 2, 0);
  day = weppls.align.right("" + day, 2, 0);
  hr = weppls.align.right("" + hr, 2, 0);
  min = weppls.align.right("" + min, 2, 0);
  sec = weppls.align.right("" + sec, 2, 0);
  result = "" + yr + "-" + mon + "-" + day + " " + hr + ":" + min + ":" + sec;
  return result;
};

weppls.align = function(s, dir, len, pad) {
  var add;
  if (pad == null) {
    pad = " ";
  }
  switch (dir[0]) {
    case "l":
      add = function(s) {
        return "" + s + pad;
      };
      break;
    case "r":
      add = function(s) {
        return "" + pad + s;
      };
      break;
    default:
      throw Error("invalid dir argument to align: " + dir);
  }
  s = "" + s;
  pad = "" + pad;
  while (s.length < len) {
    s = add(s);
  }
  return s;
};

weppls.align.left = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return weppls.align(s, "left", len, pad);
};

weppls.align.right = function(s, len, pad) {
  if (pad == null) {
    pad = " ";
  }
  return weppls.align(s, "right", len, pad);
};
